name: CI

on: [push, pull_request]

jobs:
  analyze:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: Set up Python 3.6
      uses: actions/setup-python@v1
      with:
        python-version: 3.6
    - name: Install Common dependencies
      run: |
        python -m pip install --upgrade pip
        cd common_scripts
        pip install .
    - name: Install Module dependencies
      run: |
        pip install -r km/scripts/requirements.txt
        pip install -r contract/scripts/requirements.txt
        pip install -r worker/scripts/requirements.txt
        pip install -r client/scripts/requirements.txt
        pip install -r salad/client/scripts/requirements.txt
        pip install -r salad/operator/scripts/requirements.txt
    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 --exclude __init__.py --count --max-complexity=10 --max-line-length=127 --statistics ./salad/operator/scripts/ ./salad/client/scripts/ ./common_scripts/enigma_docker_common/ ./km/scripts/ ./contract/scripts/ ./client/scripts/ ./worker/scripts/
    - name: Lint with pylint
      run: |
        pip install pylint
        pylint --rcfile .pylintrc ./salad/operator/scripts/ ./salad/client/scripts/ ./common_scripts/enigma_docker_common/ ./km/scripts/ ./contract/scripts/ ./client/scripts/ ./worker/scripts/
    - name: Typecheck with mypy
      run: |
        pip install mypy
        mypy ./common_scripts/enigma_docker_common/
        mypy ./km/scripts
        mypy ./contract/scripts
        mypy ./client/scripts
        mypy ./worker/scripts
        mypy ./salad/operator/scripts
        mypy ./salad/client/scripts
    - name: Safety Check
      run: |
        pip install safety
        safety check 

  build:
    needs: analyze
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop')) || github.event_name == 'pull_request'

    steps:
      - uses: actions/checkout@v1
      - name: Build the Docker images
        run: |
          make clone-all BRANCH=develop
          make build DOCKER_TAG=develop SGX_MODE=SW
      - name: Run the tests
        run: |
          cp .env.template .env
          docker-compose up -d
          until ./is_ready.sh; do
            sleep 1
          done
          DOCKER_TAG=develop docker-compose exec -T client make test
